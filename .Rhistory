count_matrix <- read.table
count_matrix <- read.table("Data/GSE156437_RNA_seq.txt")
count_matrix[1:4,1:4]
count_matrix <- read.table("Data/GSE156437_RNA_seq.txt", header = TRUE)
count_matrix[1:4,1:4]
pheno <- read.csv("Data/2020-08-28_pheno.csv")
head(pheno)
dim(pheno)
dim(count_matrix)
rownames(count_matrix) <- count_matrix[,"ensg"]
count_matrix$ensg <- NULL
count_matrix[1:4,1:4]
geneIDs <- c("ENSMUSG00000000001", "ENSMUSG00000000003", "tamar")
!is.null(geneIDs)
if (!all(geneIDs %in% rownames(count_matrix))) message("Some requested geneIDs not in count_matri")
count_matrix[rownames(count_matrix) %in% geneIDs, , drop = FALSE]
which(!geneIDs %in% rownames(count_matrix))
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
genes_not_avail
message(paste0("Some requested geneIDs not in count_matrix, proceeding without ", genes_not_avail))
stop("None of the requested genes are in the count_matrix, stopping...")
gene_IDs <- "tamar"
if(!is.null(geneIDs)){
if (!all(geneIDs %in% rownames(count_matrix))) {
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
message(paste0("Some requested geneIDs not in count_matrix, proceeding without using ", genes_not_avail))
}
genes_avail <- geneIDs[which(geneIDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
message(paste0("Filtering count_matrix to genes", genes_avail))
count_matrix<-count_matrix[rownames(count_matrix) %in% geneIDs, , drop = FALSE]
}
geneIDs
geneIDs <- "tamar"
if(!is.null(geneIDs)){
if (!all(geneIDs %in% rownames(count_matrix))) {
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
message(paste0("Some requested geneIDs not in count_matrix, proceeding without using ", genes_not_avail))
}
genes_avail <- geneIDs[which(geneIDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
message(paste0("Filtering count_matrix to genes", genes_avail))
count_matrix<-count_matrix[rownames(count_matrix) %in% geneIDs, , drop = FALSE]
}
paste("Some requested geneIDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", "))
geneIDs <- c("ENSMUSG00000000001", "ENSMUSG00000000003", "tamar" )
message(paste("Some requested geneIDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", ")))
geneIDs <- c("ENSMUSG00000000001", "ENSMUSG00000000003", "tamar", "imri" )
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
message(paste("Some requested geneIDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", ")))
genes_avail <- geneIDs[which(geneIDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
"Requested transformation not allowed. \n
Allowed transformation names are log_replace_min, log_add_min, log_add_0.5"
"Requested transformation not allowed.
Allowed transformation names are log_replace_min, log_add_min, log_add_0.5"
log_transform_count(count_matrix, transform = "log_replace_half_min"){
if (is.null(transform)){
message("No transformation of gene counts requested")
return(count_matrix)
}
if (!is.element(transform, c("log_replace_half_min", "log_add_min", "log_add_0.5"))){
stop("Requested transformation not allowed.
Allowed transformation names are log_replace_half_min, log_add_min, log_add_0.5")
}
if (transform == "log_replace_half_min") {
return(log_replace_half_min(count_matrix))
}
if (transform == "log_add_min"){
return(log_add_min(count_matrix))
}
if (transform == "log_add_0.5"){
return(log_add_0.5(count_matrix))
}
}
log_transform_count <- function(count_matrix, transform = "log_replace_half_min"){
if (is.null(transform)){
message("No transformation of gene counts requested")
return(count_matrix)
}
if (!is.element(transform, c("log_replace_half_min", "log_add_min", "log_add_0.5"))){
stop("Requested transformation not allowed.
Allowed transformation names are log_replace_half_min, log_add_min, log_add_0.5")
}
if (transform == "log_replace_half_min") {
return(log_replace_half_min(count_matrix))
}
if (transform == "log_add_min"){
return(log_add_min(count_matrix))
}
if (transform == "log_add_0.5"){
return(log_add_0.5(count_matrix))
}
}
log_transform_count(count_matrix, "log_replace_half_min")
log_add_0.5<- function(count_matrix){
imputed_mat <- log2(count_matrix + 0.5)
return(imputed_mat)
}
log_add_min <-  function(count_matrix){
imputed_mat = t(apply(count_matrix,1,function(x){x= x + min(x[x>0]/2);x}))
imputed_mat <- log2(imputed_mat)
return(imputed_mat)
}
log_replace_half_min<- function(count_matrix){
imputed_mat <- t(apply(count_matrix,1,function(x){x[x==0] <- min(x[x>0]/2);x}))
imputed_mat <- log2(imputed_mat)
return(imputed_mat)
}
log_transform_count(count_matrix, "log_replace_half_min")
count_matrix
log_transform_count(count_matrix, "log_add_min")
log_transform_count(count_matrix, "log_add_0.5")
log_transform_count(count_matrix, NULL)
model_string <- paste(covariates_string, "+", trait)
head(pheno)
covaraites_string <- c("Age + as.factor(Sex")
trait <- "Trait.1"
model_string <- paste(covariates_string, "+", trait)
covarites_string <- c("Age + as.factor(Sex")
model_string <- paste(covariates_string, "+", trait)
covariates_string <- c("Age + as.factor(Sex")
model_string <- paste(covariates_string, "+", trait)
model_string
covariates_string <- c("Age + as.factor(Sex)")
model_string <- paste(covariates_string, "+", trait)
model_string
#
XX<-model.matrix(as.formula(paste0("~", model_string)), data=pheno)
XX[1:4,1:4]
#
XX<-model.matrix(as.formula(paste0("~", model_string)), data=pheno)
XtXinv <- solve(t(XX) %*% as.matrix(XX))
XtXinv_se_arg <- sqrt(XtXinv[trait,trait])
numExplan <-ncol(XX)
XXproj <- XtXinv %*% t(XX)
betas_mat <- XXproj %*% count_matrix
count_matrix[1:3,1:3]
class(count_matrix)
count_matrix <- as.matrix(count_matrix)
betas_mat <- XXproj %*% count_matrix
