count_matrix <- read.table
count_matrix <- read.table("Data/GSE156437_RNA_seq.txt")
count_matrix[1:4,1:4]
count_matrix <- read.table("Data/GSE156437_RNA_seq.txt", header = TRUE)
count_matrix[1:4,1:4]
pheno <- read.csv("Data/2020-08-28_pheno.csv")
head(pheno)
dim(pheno)
dim(count_matrix)
rownames(count_matrix) <- count_matrix[,"ensg"]
count_matrix$ensg <- NULL
count_matrix[1:4,1:4]
geneIDs <- c("ENSMUSG00000000001", "ENSMUSG00000000003", "tamar")
!is.null(geneIDs)
if (!all(geneIDs %in% rownames(count_matrix))) message("Some requested geneIDs not in count_matri")
count_matrix[rownames(count_matrix) %in% geneIDs, , drop = FALSE]
which(!geneIDs %in% rownames(count_matrix))
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
genes_not_avail
message(paste0("Some requested geneIDs not in count_matrix, proceeding without ", genes_not_avail))
stop("None of the requested genes are in the count_matrix, stopping...")
gene_IDs <- "tamar"
if(!is.null(geneIDs)){
if (!all(geneIDs %in% rownames(count_matrix))) {
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
message(paste0("Some requested geneIDs not in count_matrix, proceeding without using ", genes_not_avail))
}
genes_avail <- geneIDs[which(geneIDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
message(paste0("Filtering count_matrix to genes", genes_avail))
count_matrix<-count_matrix[rownames(count_matrix) %in% geneIDs, , drop = FALSE]
}
geneIDs
geneIDs <- "tamar"
if(!is.null(geneIDs)){
if (!all(geneIDs %in% rownames(count_matrix))) {
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
message(paste0("Some requested geneIDs not in count_matrix, proceeding without using ", genes_not_avail))
}
genes_avail <- geneIDs[which(geneIDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
message(paste0("Filtering count_matrix to genes", genes_avail))
count_matrix<-count_matrix[rownames(count_matrix) %in% geneIDs, , drop = FALSE]
}
paste("Some requested geneIDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", "))
geneIDs <- c("ENSMUSG00000000001", "ENSMUSG00000000003", "tamar" )
message(paste("Some requested geneIDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", ")))
geneIDs <- c("ENSMUSG00000000001", "ENSMUSG00000000003", "tamar", "imri" )
genes_not_avail <- geneIDs[which(!geneIDs %in% rownames(count_matrix))]
message(paste("Some requested geneIDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", ")))
genes_avail <- geneIDs[which(geneIDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
"Requested transformation not allowed. \n
Allowed transformation names are log_replace_min, log_add_min, log_add_0.5"
"Requested transformation not allowed.
Allowed transformation names are log_replace_min, log_add_min, log_add_0.5"
log_transform_count(count_matrix, transform = "log_replace_half_min"){
if (is.null(transform)){
message("No transformation of gene counts requested")
return(count_matrix)
}
if (!is.element(transform, c("log_replace_half_min", "log_add_min", "log_add_0.5"))){
stop("Requested transformation not allowed.
Allowed transformation names are log_replace_half_min, log_add_min, log_add_0.5")
}
if (transform == "log_replace_half_min") {
return(log_replace_half_min(count_matrix))
}
if (transform == "log_add_min"){
return(log_add_min(count_matrix))
}
if (transform == "log_add_0.5"){
return(log_add_0.5(count_matrix))
}
}
log_transform_count <- function(count_matrix, transform = "log_replace_half_min"){
if (is.null(transform)){
message("No transformation of gene counts requested")
return(count_matrix)
}
if (!is.element(transform, c("log_replace_half_min", "log_add_min", "log_add_0.5"))){
stop("Requested transformation not allowed.
Allowed transformation names are log_replace_half_min, log_add_min, log_add_0.5")
}
if (transform == "log_replace_half_min") {
return(log_replace_half_min(count_matrix))
}
if (transform == "log_add_min"){
return(log_add_min(count_matrix))
}
if (transform == "log_add_0.5"){
return(log_add_0.5(count_matrix))
}
}
log_transform_count(count_matrix, "log_replace_half_min")
log_add_0.5<- function(count_matrix){
imputed_mat <- log2(count_matrix + 0.5)
return(imputed_mat)
}
log_add_min <-  function(count_matrix){
imputed_mat = t(apply(count_matrix,1,function(x){x= x + min(x[x>0]/2);x}))
imputed_mat <- log2(imputed_mat)
return(imputed_mat)
}
log_replace_half_min<- function(count_matrix){
imputed_mat <- t(apply(count_matrix,1,function(x){x[x==0] <- min(x[x>0]/2);x}))
imputed_mat <- log2(imputed_mat)
return(imputed_mat)
}
log_transform_count(count_matrix, "log_replace_half_min")
count_matrix
log_transform_count(count_matrix, "log_add_min")
log_transform_count(count_matrix, "log_add_0.5")
log_transform_count(count_matrix, NULL)
model_string <- paste(covariates_string, "+", trait)
head(pheno)
covaraites_string <- c("Age + as.factor(Sex")
trait <- "Trait.1"
model_string <- paste(covariates_string, "+", trait)
covarites_string <- c("Age + as.factor(Sex")
model_string <- paste(covariates_string, "+", trait)
covariates_string <- c("Age + as.factor(Sex")
model_string <- paste(covariates_string, "+", trait)
model_string
covariates_string <- c("Age + as.factor(Sex)")
model_string <- paste(covariates_string, "+", trait)
model_string
#
XX<-model.matrix(as.formula(paste0("~", model_string)), data=pheno)
XX[1:4,1:4]
#
XX<-model.matrix(as.formula(paste0("~", model_string)), data=pheno)
XtXinv <- solve(t(XX) %*% as.matrix(XX))
XtXinv_se_arg <- sqrt(XtXinv[trait,trait])
numExplan <-ncol(XX)
XXproj <- XtXinv %*% t(XX)
betas_mat <- XXproj %*% count_matrix
count_matrix[1:3,1:3]
class(count_matrix)
count_matrix <- as.matrix(count_matrix)
betas_mat <- XXproj %*% count_matrix
dat <- read.table("/Volumes/linkage/Integration/Projects/2020_PRS_BP/Phenotype/Pheno_linearmodel/2020-08-15_AFR_topmed_f8_no_duplication.txt")
dat <- read.table("/Volumes/linkage/Integration/Projects/2020_PRS_BP/Phenotype/Pheno_linearmodel/2020-08-15_AFR_topmed_f8_no_duplication.txt", fill = TRUE)
head(Dat)
head(dat)
dat <- read.table("/Volumes/linkage/Integration/Projects/2020_PRS_BP/Phenotype/Pheno_linearmodel/2020-08-15_AFR_topmed_f8_no_duplication.txt", fill = TRUE, header = TRUE)
head(dat)
summary(dat$SBP_V1[which(dat$study == "COPDGene")])
summary(dat$SBP_V1[which(dat$study == "MEAS")])
summary(dat$SBP_V1[which(dat$study == "MESA")])
summary(dat$SBP_V1[which(dat$study == "JHS")])
summary(as.factor(dat$study))
summary(dat$SBP_V1[which(dat$study == "WHI")])
dat <- read.table("/Volumes/linkage/Integration/Projects/2020_PRS_BP/Phenotype/Pheno_linearmodel/2020-08-15_All_sample_topmed_f8_no_duplication.txt", fill = TRUE, header = TRUE)
summary(dat$SBP_V1[which(dat$study == "WHI" & dat$race_clean == "AA")])
summary(dat$SBP_V1[which(dat$study == "COPDGene" & dat$race_clean == "AA")])
summary(dat$SBP_V1[which(dat$study == "MESA" & dat$race_clean == "AA")])
summary(dat$SBP_V1[which(dat$study == "JHS" & dat$race_clean == "AA")])
summary(dat$AGE_V1[which(dat$study == "JHS" & dat$race_clean == "AA")])
summary(dat$AGE_V1[which(dat$study == "COPDGene" & dat$race_clean == "AA")])
summary(dat$AGE_V1[which(dat$study == "MESA" & dat$race_clean == "AA")])
l0ad
load("/Volumes/linkage/Integration/Projects/2020_PRS_BP/Analysis/Common_Variant/UKB+ICBP/SBP/PRS_Summary_Mixmodel/2020-08-16-Multi_SBP.RData")
ls()
small_null$VarComp
97.09574/(213.44929 + 97.09574)
97.09574/(213.44929 + 97.09574)*100
97.09574/(385.64771 + 97.09574)*100
97.09574/(385.64771 + 97.09574)*100
library("knitr")
## setting working directory
opts_knit$set(root.dir = "~/Dropbox (Personal)/Hadas/30_min_habituation")
library(lme4)
library(lme4)
library(lmerTest)
library(sjstats)
library(sjstats)
library(data.table)
library(ggplot2)
data_file_name <- "30_min_habituation.csv"
### function to organize the data in a "long" format
short_to_long <- function(data, time_col, subj_col, status, sex){
subj_cols <- grep(subj_col, colnames(data), value = TRUE)
df <- data.frame(time = data[,time_col], subj = subj_cols[1], status = status, sex = sex, move = data[,subj_cols[1]] )
for (i in 2:length(subj_cols)){
df_i <- data.frame(time = data[,time_col], subj = subj_cols[i], status = status, sex = sex , move = data[,subj_cols[i]] )
df <- rbind(df, df_i)
}
return(df)
}
## read each block of data, and annotate appropriately
## first: female control mice:
fem_cont <- read.csv( data_file_name, nrow = 6, skip = 6, header = FALSE)
colnames(fem_cont)[1] <- "time"
colnames(fem_cont)[2:ncol(fem_cont)] <- paste0("sub_", 1:(ncol(fem_cont)-1))
fem_cont_long <- short_to_long(fem_cont, "time", "sub", "control", "female")
# update count of subjects so far:
subj_count <- ncol(fem_cont)-1
## female treated mice:
fem_treat <- read.csv(data_file_name, nrow = 6, skip = 14, header = FALSE)
colnames(fem_treat)[1] <- "time"
fem_treat$V9 <- NULL
colnames(fem_treat)[2:ncol(fem_treat)] <- paste0("sub_", (subj_count +1):(subj_count + ncol(fem_treat) -1))
fem_treat_long <- short_to_long(fem_treat, "time", "sub", "treatment", "female")
# update count of subjects so far:
subj_count <- subj_count + ncol(fem_treat) - 1
## male control mice:
male_cont <- read.csv( data_file_name, nrow = 6, skip = 22, header = FALSE)
colnames(male_cont)[1] <- "time"
male_cont$V7 <- male_cont$V8 <- male_cont$V9 <- NULL
colnames(male_cont)[2:ncol(male_cont)] <- paste0("sub_", (subj_count +1):(subj_count + ncol(male_cont) -1))
male_cont_long <- short_to_long(male_cont, "time", "sub", "control", "male")
# update count of subjects so far:
subj_count <- subj_count + ncol(male_cont) - 1
## male treated mice:
male_treat <- read.csv(data_file_name, nrow = 6, skip = 30, header = FALSE)
colnames(male_treat)[1] <- "time"
male_treat$V9 <- NULL
colnames(male_treat)[2:ncol(male_treat)] <- paste0("sub_", (subj_count +1):(subj_count + ncol(male_treat) -1))
male_treat_long <- short_to_long(male_treat, "time", "sub", "treatment", "male")
dat <- rbind(fem_cont_long, fem_treat_long, male_cont_long, male_treat_long)
head(dat)
write.csv(dat, file = "habituation_30_min.csv")
write.csv(dat, file = "habituation_30_min.csv", row.names = FALSE)
all(is.element(c("a", "b"), c("a", "b", "c", "d")))
all(is.element(c("a", "h"), c("a", "b", "c", "d")))
filter_by_genes <- function(count_matrix, gene_IDs){
if (!all(gene_IDs %in% rownames(count_matrix))) {
genes_not_avail <- geneIDs[which(!gene_IDs %in% rownames(count_matrix))]
message(paste("Some requested gene_IDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", ")))
}
genes_avail <- geneIDs[which(gene_IDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
message(paste0("Filtering count_matrix to genes", genes_avail))
count_matrix<-count_matrix[rownames(count_matrix) %in% gene_IDs, , drop = FALSE]
return(count_matrix)
}
count_matrix <- matrix(c(1:12), 3, 4)
rownames(count_matrix) <- c("a", "b", "c")
filter_by_genes(count_matrix, c("a"))
filter_by_genes <- function(count_matrix, gene_IDs){
if (!all(gene_IDs %in% rownames(count_matrix))) {
genes_not_avail <- gene_IDs[which(!gene_IDs %in% rownames(count_matrix))]
message(paste("Some requested gene_IDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", ")))
}
genes_avail <- geneIDs[which(gene_IDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
message(paste0("Filtering count_matrix to genes", genes_avail))
count_matrix<-count_matrix[rownames(count_matrix) %in% gene_IDs, , drop = FALSE]
return(count_matrix)
}
filter_by_genes(count_matrix, c("a"))
filter_by_genes <- function(count_matrix, gene_IDs){
if (!all(gene_IDs %in% rownames(count_matrix))) {
genes_not_avail <- gene_IDs[which(!gene_IDs %in% rownames(count_matrix))]
message(paste("Some requested gene_IDs not in count_matrix, proceeding without using ",
paste(genes_not_avail, collapse = ", ")))
}
genes_avail <- gene_IDs[which(gene_IDs %in% rownames(count_matrix))]
if (length(genes_avail) == 0){
stop("None of the requested genes are in the count_matrix, stopping...")
}
message(paste0("Filtering count_matrix to genes", genes_avail))
count_matrix<-count_matrix[rownames(count_matrix) %in% gene_IDs, , drop = FALSE]
return(count_matrix)
}
filter_by_genes(count_matrix, c("a"))
filter_by_genes(count_matrix, c("a", "b"))
filter_by_genes(count_matrix, c("a", "e"))
filter_by_genes(count_matrix, c( "e"))
