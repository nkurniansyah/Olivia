x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
summary(lm(y ~ x*y))
summary(lm(y ~ x:y))
compute_empirical_pvalues <- function(statistics,
null_statistics,
empirical_type = "quantile",
stat_type = "p_value",
t_df = NULL){
if (!is.element(empirical_type, c("quantile", "storey"))){
stop(paste("Requested empirical p-value types (empirical_type) is", empirical_type,
"allowed values are quantile and storey", "\n"))
}
if (!is.element(stat_type, c("z_score", "p_value", "t_stat"))){
stop(paste("Provided statistics (stat_type) are", stat_type,
"allowed types are p_value, z_score, and t_stat", "\n"))
}
message(paste0("Run ",empirical_type," empirical p-values ","using ",stat_type))
if (empirical_type == "quantile"){
if (stat_type == "z_score"){
statistics <- pchisq(statistics^2, df =1, lower.tail = FALSE)
null_statistics <- pchisq(null_statistics^2, df =1, lower.tail = FALSE)
}
if (stat_type == "t_stat"){
if (is.null(t_df)) stop("Missing degress of freedom (t_df) for t-stat")
statistics <- 2*pt(abs(statistics), df = t_df, lower.tail = FALSE)
null_statistics <- 2*pt(abs(null_statistics), df = t_df, lower.tail = FALSE)
}
compute_quantile_empirical_pvalues(statistics, null_statistics)
} else{  # empirical_type == "storey"
if (stat_type == "p_value")
stop("Storey empirical p-value need z-scores or t-statistics")
compute_storey_empirical_pvalues(statistics, null_statistics)
}
}
set.seed(123)
stat<- runif(1000,0,1)
null_stat<- runif(100000,0,1)
emp_pval<-compute_quantile_empirical_pvalues(statistics=stat,null_statistics=null_stat)
compute_quantile_empirical_pvalues <- function(statistics, null_statistics){
Fn <- ecdf(null_statistics)
emp_pvalues <- Fn(statistics)
inds <- which(emp_pvalues == 0)
if (length(inds) > 0){
emp_pvalues[inds] <- 1/(2*length(null_statistics))
}
emp_pvalues
}
emp_pval<-compute_quantile_empirical_pvalues(statistics=stat,null_statistics=null_stat)
hist(emp_pval)
hist(emp_pval)
hist(emp_pval)
par(mar = c())
hist(emp_pval)
par(mar = c(0.2, 0.2, 0.2, 0.2))
hist(emp_pval)
median(emp_pval)
pval<- 1e-05
null_pval<-runif(100000,0,1)
perm_pval<-permutation_pvalues(pvalue=pval,null_pval=null_pval)
permutation_pvalues<-function(pvalue, null_pval){
perm_pval<-sum(null_pval < pvalue)/length(null_pval)
perm_pval
}
pval<- 1e-05
null_pval<-runif(100000,0,1)
perm_pval<-permutation_pvalues(pvalue=pval,null_pval=null_pval)
perm_pval
expect_equal(length(pval),length(perm_pval))
expect_true( abs(pval - perm_pval) < 1e-4)
library(testthat)
expect_true( abs(pval - perm_pval) < 1e-4)
par(mar = c(0.4, 0.4, 0.4, 0.4))
